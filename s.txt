
-----Dining Philosphers---------

#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<semaphore.h>
#include<unistd.h>

sem_t room;
sem_t chopstick[5];

void * philosopher(void *);
void eat(int);
int main()
{
	int i,a[5];
	pthread_t tid[5];

	sem_init(&room,0,4);

	for(i=0;i<5;i++)
		sem_init(&chopstick[i],0,1);

	for(i=0;i<5;i++){
		a[i]=i;
		pthread_create(&tid[i],NULL,philosopher,(void *)&a[i]);
	}
	for(i=0;i<5;i++)
		pthread_join(tid[i],NULL);
}

void * philosopher(void * num)
{
	int phil=*(int *)num;

	sem_wait(&room);
	printf("\nPhilosopher %d has entered room",phil);
	sem_wait(&chopstick[phil]);
	sem_wait(&chopstick[(phil+1)%5]);

	eat(phil);
	sleep(2);
	printf("\nPhilosopher %d has finished eating",phil);

	sem_post(&chopstick[(phil+1)%5]);
	sem_post(&chopstick[phil]);
	sem_post(&room);
}

void eat(int phil)
{
	printf("\nPhilosopher %d is eating",phil);
}


----------Producer Consumer-------------
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#define BUFFER_SIZE 5
#define MAX_ITEMS 5  // Maximum number of items to be produced and consumed

int buffer[BUFFER_SIZE];
int in = 0, out = 0;
sem_t empty, full, mutex;

void *producer(void *) {
    int item = 1;
    for (int i = 0; i < MAX_ITEMS; i++) {
        sleep(1);  // Simulate some time taken to produce the item
        printf("Producer produced item %d\n", item);
        sem_wait(&empty);
        sem_wait(&mutex);
        buffer[in] = item;
        in = (in + 1) % BUFFER_SIZE;
        sem_post(&mutex);
        sem_post(&full);
        item++;
    }
    pthread_exit(NULL);
}

void *consumer(void *) {
    for (int i = 0; i < MAX_ITEMS; i++) {
        sem_wait(&full);
        sem_wait(&mutex);
        int item = buffer[out];
        out = (out + 1) % BUFFER_SIZE;
        sem_post(&mutex);
        sem_post(&empty);
        printf("Consumer consumed item %d\n", item);
        sleep(1);  // Simulate some time taken to consume the item
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t producer_thread, consumer_thread;
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    sem_init(&mutex, 0, 1);
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);
    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);
    return 0;
}

----------deadlock------------------


#include<stdio.h>
#include<conio.h>
int max[100][100];
int alloc[100][100];
int need[100][100];
int avail[100];
int n,r;
void input();
void show();
void cal();
int main()
{
               int i,j;
               printf("********** Deadlock Detection Algo ************\n");
               input();
               show();
               cal();
               getch();
               return 0;
}
void input()
{
               int i,j;
               printf("Enter the no of Processes\t");
               scanf("%d",&n);
               printf("Enter the no of resource instances\t");
               scanf("%d",&r);
               printf("Enter the Max Matrix\n");
               for(i=0;i<n;i++)
               {
                              for(j=0;j<r;j++)
                              {
                                             scanf("%d",&max[i][j]);
                              }
               }
               printf("Enter the Allocation Matrix\n");
               for(i=0;i<n;i++)
               {
                              for(j=0;j<r;j++)
                              {
                                             scanf("%d",&alloc[i][j]);
                              }
               }
               printf("Enter the available Resources\n");
               for(j=0;j<r;j++)
               {
                              scanf("%d",&avail[j]);
               }
}
void show()
{
               int i,j;
               printf("Process\t Allocation\t Max\t Available\t");
               for(i=0;i<n;i++)
               {
                              printf("\nP%d\t   ",i+1);
                              for(j=0;j<r;j++)
                              {
                                             printf("%d ",alloc[i][j]);
                              }
                              printf("\t");
                              for(j=0;j<r;j++)
                              {
                                             printf("%d ",max[i][j]); 
                              }
                              printf("\t");
                              if(i==0)
                              {
                                             for(j=0;j<r;j++)
                                             printf("%d ",avail[j]);
                              }
               }
}
void cal()
{
               int finish[100],temp,need[100][100],flag=1,k,c1=0;
               int dead[100];
               int safe[100];
               int i,j;
               for(i=0;i<n;i++)
               {
                              finish[i]=0;
               }
               //find need matrix
               for(i=0;i<n;i++)
               {
                              for(j=0;j<r;j++)
                              {
                                             need[i][j]=max[i][j]-alloc[i][j];
                              }
               }
               while(flag)
               {
                              flag=0;
                              for(i=0;i<n;i++)
                              {
                                             int c=0;
                                             for(j=0;j<r;j++)
                                             {
                                                            if((finish[i]==0)&&(need[i][j]<=avail[j]))
                                                            {
                                                                           c++;
                                                                           if(c==r)
                                                                           {
                                                                                          for(k=0;k<r;k++)
                                                                                          {
                                                                                                         avail[k]+=alloc[i][j];
                                                                                                         finish[i]=1;
                                                                                                         flag=1;
                                                                                          }
                                                                                           //printf("\nP%d",i);
                                                                                           if(finish[i]==1)
                                                                                          {
                                                                                                         i=n;
                                                                              }
                                                                  }
                                                      }
                                          }
                             }
                }
                j=0;
                flag=0;
                for(i=0;i<n;i++)
                {
                              if(finish[i]==0)
                              {
                                             dead[j]=i;
                                             j++;
                                             flag=1;
                              }
               }
               if(flag==1)
               {
                              printf("\n\nSystem is in Deadlock and the Deadlock process are\n");
                              for(i=0;i<n;i++)
                              {
                                             printf("P%d\t",dead[i]);
                              }
               }
               else
               {
                              printf("\nNo Deadlock Occur");
               }  
}



---------Banker's Algorithm----------

#include<stdio.h>
void main()
{
    int n,m,all[10][10],max[10][10],need[10][10],ava[10],flag[10],prev[10],arr[10];
    int k,z=0,c,count=0;
    printf("Enter the number of processes and number of resources:\n");
    scanf("%d %d",&n,&m);
    printf("Enter the max number of resources required by the processes:\n");
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            scanf("%d",&max[i][j]);
        }
    }
    printf("Enter the allocated number of resources to the processes:\n");
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            scanf("%d",&all[i][j]);
        }
    }
    printf("Enter the available number of resources:\n");
    for(int i=0;i<m;i++)
    {
        scanf("%d",&ava[i]);
    }
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            need[i][j]=max[i][j]-all[i][j];
        }
    }
    for(int i=0;i<n;i++)
    {
        flag[i]=1;
    }
    k=1;
    while(k)
    {
        k=0;
        for(int i=0;i<n;i++)
        {
            if(flag[i])
            {
                c=0;
                for(int j=0;j<m;j++)
                {
                    if(need[i][j]<=ava[j])
                    c++;
                }
                if(c==m)
                {
                    arr[z++]=i;
                    for(int j=0;j<m;j++)
                    {
                        ava[j]+=all[i][j];
                        all[i][j]=0;
                    }
                    flag[i]=0;
                    count++;

                }
            }
        }
        for(int i=0;i<n;i++)
        {
            if(flag[i]!=prev[i])
            {
                k=1;
                break;
            }
        }
        for(int i=0;i<n;i++)
        {
            prev[i]=flag[i];
        }
    }
    if(count==n)
    {
        printf("The proccesses are in safe state:\n");
        printf("The safe sequence is:\n");
        for(int i=0;i<n;i++)
        {
            printf("P%d ",arr[i]+1);
        }
        printf("\n");

    }
    else
    {
        printf("The processes are in deadlock condition:\n");
    }
}


----------FIRST FIT------------

#include<stdio.h>
#define max 25
void main()
{
int frag[max],b[max],f[max],i,j,nb,nf,temp;
static int bf[max],ff[max];
printf("\n\tMemory Management Scheme - First Fit");
printf("\nEnter the number of blocks:");
scanf("%d",&nb);
printf("Enter the number of files:");
scanf("%d",&nf);
printf("\nEnter the size of the blocks:-\n");
for(i=1;i<=nb;i++)
{
printf("Block %d:",i);
scanf("%d",&b[i]);
}
printf("Enter the size of the files :-\n");
for(i=1;i<=nf;i++)
{
printf("File %d:",i);
scanf("%d",&f[i]);
}
for(i=1;i<=nf;i++)
{
for(j=1;j<=nb;j++)
{
if(bf[j]!=1)
{
temp=b[j]-f[i];
if(temp>=0)
{
ff[i]=j;
break;
}
}
}
frag[i]=temp;
bf[ff[i]]=1;
}
printf("\nFile_no:\tFile_size :\tBlock_no:\tBlock_size:\tFragement");
for(i=1;i<=nf;i++)
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d",i,f[i],ff[i],b[ff[i]],frag[i]);
}


-----------WORST FIT---------------

#include<stdio.h>
#define max 25
void main()
{
int frag[max],b[max],f[max],i,j,nb,nf,temp,highest=0;
static int bf[max],ff[max];
printf("\n\tMemory Management Scheme - Worst Fit");
printf("\nEnter the number of blocks:");
scanf("%d",&nb);
printf("Enter the number of files:");
scanf("%d",&nf);
printf("\nEnter the size of the blocks:-\n");
for(i=1;i<=nb;i++)
{
printf("Block %d:",i);
scanf("%d",&b[i]);
}
printf("Enter the size of the files :-\n");
for(i=1;i<=nf;i++)
{
printf("File %d:",i);
scanf("%d",&f[i]);
}
for(i=1;i<=nf;i++)
{

for(j=1;j<=nb;j++)
{
if(bf[j]!=1) //if bf[j] is not allocated
{
temp=b[j]-f[i];
if(temp>=0)
if(highest<temp)
{
ff[i]=j;
highest=temp;
}
}
}
frag[i]=highest;
bf[ff[i]]=1;
highest=0;
}
printf("\nFile_no:\tFile_size :\tBlock_no:\tBlock_size:\tFragement");
for(i=1;i<=nf;i++)
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d",i,f[i],ff[i],b[ff[i]],frag[i]);
}


---------BEST FIT-------------

#include<stdio.h>
#define max 25
void main()
{
int frag[max],b[max],f[max],i,j,nb,nf,temp,lowest=10000;
static int bf[max],ff[max];
printf("\nEnter the number of blocks:");
scanf("%d",&nb);
printf("Enter the number of files:");
scanf("%d",&nf);
printf("\nEnter the size of the blocks:-\n");
for(i=1;i<=nb;i++)
{
printf("Block %d:",i);
scanf("%d",&b[i]);
}
printf("Enter the size of the files :-\n");
for(i=1;i<=nf;i++)
{
printf("File %d:",i);
scanf("%d",&f[i]);
}
for(i=1;i<=nf;i++)
{
for(j=1;j<=nb;j++)
{
if(bf[j]!=1)
{
temp=b[j]-f[i];
if(temp>=0)
if(lowest>temp)
{
ff[i]=j;

lowest=temp;
}
}
}
frag[i]=lowest;
bf[ff[i]]=1;
lowest=10000;
}
printf("\nFile No\tFile Size \tBlock No\tBlock Size\tFragment");
for(i=1;i<=nf && ff[i]!=0;i++)
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d",i,f[i],ff[i],b[ff[i]],frag[i]);
}
